// Auto-generated by stack_ptx_generate_infos.py on 2025-10-20 23:04:37Z
// Source JSON: stack_ptx_descriptions.json

/*
* SPDX-FileCopyrightText: 2025 MetaMachines LLC
*
* SPDX-License-Identifier: MIT
*/

#pragma once
#include <stack_ptx.h>
/** \brief Helper to statically calculate the length of an array. */
#define STACK_PTX_ARRAY_NUM_ELEMS(array) sizeof((array)) / sizeof(*(array))

#define _STACK_PTX_ENCODE_META(MI,ST,c) {					\
	.instruction_type=STACK_PTX_INSTRUCTION_TYPE_META,		\
	.stack_idx=(ST),										\
	.idx=(MI),												\
	.payload={.meta_constant=(c)}							\
}
#define _STACK_PTX_ENCODE_PTX_INSTRUCTION(IDX, ARG_0, ARG_1, ARG_2, ARG_3, RET_0, RET_1, ALIGNED) { \
	.instruction_type = STACK_PTX_INSTRUCTION_TYPE_PTX, \
	.stack_idx = 0, \
	.idx = (IDX), \
	.payload={.ptx_args = { \
		.arg_0 = (ARG_0), \
		.arg_1 = (ARG_1), \
		.arg_2 = (ARG_2), \
		.arg_3 = (ARG_3), \
		.ret_0 = (RET_0), \
		.ret_1 = (RET_1), \
		.flag_is_aligned = (ALIGNED), \
	}} \
}
#define _STACK_PTX_ENCODE_SPECIAL_REGISTER(IDX, ARG) { 		\
	.instruction_type = STACK_PTX_INSTRUCTION_TYPE_SPECIAL, \
	.stack_idx = 0, \
	.idx = (IDX), \
	.payload={.special_arg = (ARG)} \
}
#define stack_ptx_encode_input(IDX) {	                \
	.instruction_type=STACK_PTX_INSTRUCTION_TYPE_INPUT,		\
	.stack_idx=0,				                            \
	.idx=(IDX),						                        \
	.payload={0}			                                \
}
#define stack_ptx_encode_return {							\
	.instruction_type=STACK_PTX_INSTRUCTION_TYPE_RETURN,	\
	.stack_idx=0,					                        \
	.idx=0,													\
	.payload={0}											\
}
#define stack_ptx_encode_routine(IDX) {						\
	.instruction_type=STACK_PTX_INSTRUCTION_TYPE_ROUTINE,	\
	.stack_idx=0,					                        \
	.idx=(IDX),												\
	.payload={0}											\
}
#define stack_ptx_encode_store(ST,IDX) {                    \
    .instruction_type=STACK_PTX_INSTRUCTION_TYPE_STORE,     \
    .stack_idx=(ST),                                        \
    .idx=(IDX),                                             \
    .payload={0}                                            \
}
#define stack_ptx_encode_load(IDX) {                        \
    .instruction_type=STACK_PTX_INSTRUCTION_TYPE_LOAD,      \
    .stack_idx=0,                                           \
    .idx=(IDX),                                             \
    .payload={0}                                            \
}
#define stack_ptx_encode_meta_constant(c)	_STACK_PTX_ENCODE_META(STACK_PTX_META_INSTRUCTION_CONSTANT, 0, c)
#define stack_ptx_encode_meta_dup(ST) 		_STACK_PTX_ENCODE_META(STACK_PTX_META_INSTRUCTION_DUP, ST, 0)
#define stack_ptx_encode_meta_yank_dup(ST) 	_STACK_PTX_ENCODE_META(STACK_PTX_META_INSTRUCTION_YANK_DUP, ST, 0)
#define stack_ptx_encode_meta_swap(ST) 		_STACK_PTX_ENCODE_META(STACK_PTX_META_INSTRUCTION_SWAP, ST, 0)
#define stack_ptx_encode_meta_swap_with(ST) _STACK_PTX_ENCODE_META(STACK_PTX_META_INSTRUCTION_SWAP_WITH, ST, 0)
#define stack_ptx_encode_meta_replace(ST) 	_STACK_PTX_ENCODE_META(STACK_PTX_META_INSTRUCTION_REPLACE, ST, 0)
#define stack_ptx_encode_meta_drop(ST)		_STACK_PTX_ENCODE_META(STACK_PTX_META_INSTRUCTION_DROP, ST, 0)
#define stack_ptx_encode_meta_rotate(ST)	_STACK_PTX_ENCODE_META(STACK_PTX_META_INSTRUCTION_ROTATE, ST, 0)
#define stack_ptx_encode_meta_reverse(ST)	_STACK_PTX_ENCODE_META(STACK_PTX_META_INSTRUCTION_REVERSE, ST, 0)

typedef enum {
    STACK_PTX_STACK_TYPE_F32,
    STACK_PTX_STACK_TYPE_U32,
    STACK_PTX_STACK_TYPE_S32,
    STACK_PTX_STACK_TYPE_PRED,
    STACK_PTX_STACK_TYPE_TF32,
    STACK_PTX_STACK_TYPE_F16,
    STACK_PTX_STACK_TYPE_F16X2,
    STACK_PTX_STACK_TYPE_NUM_ENUMS
} StackPtxStackType;

typedef enum {
    STACK_PTX_ARG_TYPE_F32,
    STACK_PTX_ARG_TYPE_TF32,
    STACK_PTX_ARG_TYPE_V1_TF32,
    STACK_PTX_ARG_TYPE_V2_TF32,
    STACK_PTX_ARG_TYPE_V4_F32,
    STACK_PTX_ARG_TYPE_S32,
    STACK_PTX_ARG_TYPE_U32,
    STACK_PTX_ARG_TYPE_V4_U32,
    STACK_PTX_ARG_TYPE_PRED,
    STACK_PTX_ARG_TYPE_F16,
    STACK_PTX_ARG_TYPE_F16X2,
    STACK_PTX_ARG_TYPE_V2_F16,
    STACK_PTX_ARG_TYPE_NUM_ENUMS
} StackPtxArgType;

#define STACK_PTX_ARG_TYPE_NONE STACK_PTX_ARG_TYPE_NUM_ENUMS

typedef enum {
    STACK_PTX_PTX_INSTRUCTION_ADD_U32,
    STACK_PTX_PTX_INSTRUCTION_SUB_U32,
    STACK_PTX_PTX_INSTRUCTION_MUL_LO_U32,
    STACK_PTX_PTX_INSTRUCTION_MAD_LO_U32,
    STACK_PTX_PTX_INSTRUCTION_COPYSIGN_F32,
    STACK_PTX_PTX_INSTRUCTION_ADD_FTZ_F32,
    STACK_PTX_PTX_INSTRUCTION_SUB_FTZ_F32,
    STACK_PTX_PTX_INSTRUCTION_MUL_FTZ_F32,
    STACK_PTX_PTX_INSTRUCTION_FMA_RN_FTZ_F32,
    STACK_PTX_PTX_INSTRUCTION_DIV_APPROX_FTZ_F32,
    STACK_PTX_PTX_INSTRUCTION_ABS_FTZ_F32,
    STACK_PTX_PTX_INSTRUCTION_NEG_FTZ_F32,
    STACK_PTX_PTX_INSTRUCTION_MIN_FTZ_F32,
    STACK_PTX_PTX_INSTRUCTION_MAX_FTZ_F32,
    STACK_PTX_PTX_INSTRUCTION_RCP_APPROX_FTZ_F32,
    STACK_PTX_PTX_INSTRUCTION_SQRT_APPROX_FTZ_F32,
    STACK_PTX_PTX_INSTRUCTION_RSQRT_APPROX_FTZ_F32,
    STACK_PTX_PTX_INSTRUCTION_SIN_APPROX_FTZ_F32,
    STACK_PTX_PTX_INSTRUCTION_COS_APPROX_FTZ_F32,
    STACK_PTX_PTX_INSTRUCTION_LG2_APPROX_FTZ_F32,
    STACK_PTX_PTX_INSTRUCTION_EX2_APPROX_FTZ_F32,
    STACK_PTX_PTX_INSTRUCTION_TANH_APPROX_F32,
    STACK_PTX_PTX_INSTRUCTION_SETP_LT_FTZ_F32,
    STACK_PTX_PTX_INSTRUCTION_SELP_F32,
    STACK_PTX_PTX_INSTRUCTION_CVT_RNA_TF32_F32,
    STACK_PTX_PTX_INSTRUCTION_CVT_RN_F32_S32,
    STACK_PTX_PTX_INSTRUCTION_MMA_SYNC_ALIGNED_M16N8K4_ROW_COL_F32_TF32_TF32_F32,
    STACK_PTX_PTX_INSTRUCTION_F16X2_TO_V2_F16,
    STACK_PTX_PTX_INSTRUCTION_F16_TO_F32,
    STACK_PTX_PTX_INSTRUCTION_NUM_ENUMS
} StackPtxPtxInstruction;

typedef enum {
    STACK_PTX_SPECIAL_REGISTER_TID,
    STACK_PTX_SPECIAL_REGISTER_TID_X,
    STACK_PTX_SPECIAL_REGISTER_TID_Y,
    STACK_PTX_SPECIAL_REGISTER_TID_Z,
    STACK_PTX_SPECIAL_REGISTER_NTID,
    STACK_PTX_SPECIAL_REGISTER_NTID_X,
    STACK_PTX_SPECIAL_REGISTER_NTID_Y,
    STACK_PTX_SPECIAL_REGISTER_NTID_Z,
    STACK_PTX_SPECIAL_REGISTER_LANEID,
    STACK_PTX_SPECIAL_REGISTER_WARPID,
    STACK_PTX_SPECIAL_REGISTER_NWARPID,
    STACK_PTX_SPECIAL_REGISTER_CTAID,
    STACK_PTX_SPECIAL_REGISTER_CTAID_X,
    STACK_PTX_SPECIAL_REGISTER_CTAID_Y,
    STACK_PTX_SPECIAL_REGISTER_CTAID_Z,
    STACK_PTX_SPECIAL_REGISTER_NCTAID,
    STACK_PTX_SPECIAL_REGISTER_NCTAID_X,
    STACK_PTX_SPECIAL_REGISTER_NCTAID_Y,
    STACK_PTX_SPECIAL_REGISTER_NCTAID_Z,
    STACK_PTX_SPECIAL_REGISTER_SMID,
    STACK_PTX_SPECIAL_REGISTER_NSMID,
    STACK_PTX_SPECIAL_REGISTER_GRIDID,
    STACK_PTX_SPECIAL_REGISTER_LANEMASK_EQ,
    STACK_PTX_SPECIAL_REGISTER_LANEMASK_LE,
    STACK_PTX_SPECIAL_REGISTER_LANEMASK_LT,
    STACK_PTX_SPECIAL_REGISTER_LANEMASK_GE,
    STACK_PTX_SPECIAL_REGISTER_LANEMASK_GT,
    STACK_PTX_SPECIAL_REGISTER_CLOCK,
    STACK_PTX_SPECIAL_REGISTER_CLOCK_HI,
    STACK_PTX_SPECIAL_REGISTER_TOTAL_SMEM_SIZE,
    STACK_PTX_SPECIAL_REGISTER_AGGR_SMEM_SIZE,
    STACK_PTX_SPECIAL_REGISTER_DYNAMIC_SMEM_SIZE,
    STACK_PTX_SPECIAL_REGISTER_NUM_ENUMS
} StackPtxSpecialRegister;

static const char* stack_ptx_stack_literal_prefixes[] = {
    [STACK_PTX_STACK_TYPE_F32] = "f32",
    [STACK_PTX_STACK_TYPE_U32] = "u32",
    [STACK_PTX_STACK_TYPE_S32] = "s32",
    [STACK_PTX_STACK_TYPE_PRED] = "pred",
    [STACK_PTX_STACK_TYPE_TF32] = "b32",
    [STACK_PTX_STACK_TYPE_F16] = "b16",
    [STACK_PTX_STACK_TYPE_F16X2] = "b32",
};

static const StackPtxArgTypeInfo stack_ptx_arg_type_info[] = {
    [STACK_PTX_ARG_TYPE_F32] = { STACK_PTX_STACK_TYPE_F32, 0 },
    [STACK_PTX_ARG_TYPE_TF32] = { STACK_PTX_STACK_TYPE_TF32, 0 },
    [STACK_PTX_ARG_TYPE_V1_TF32] = { STACK_PTX_STACK_TYPE_TF32, 1 },
    [STACK_PTX_ARG_TYPE_V2_TF32] = { STACK_PTX_STACK_TYPE_TF32, 2 },
    [STACK_PTX_ARG_TYPE_V4_F32] = { STACK_PTX_STACK_TYPE_F32, 4 },
    [STACK_PTX_ARG_TYPE_S32] = { STACK_PTX_STACK_TYPE_S32, 0 },
    [STACK_PTX_ARG_TYPE_U32] = { STACK_PTX_STACK_TYPE_U32, 0 },
    [STACK_PTX_ARG_TYPE_V4_U32] = { STACK_PTX_STACK_TYPE_U32, 4 },
    [STACK_PTX_ARG_TYPE_PRED] = { STACK_PTX_STACK_TYPE_PRED, 0 },
    [STACK_PTX_ARG_TYPE_F16] = { STACK_PTX_STACK_TYPE_F16, 0 },
    [STACK_PTX_ARG_TYPE_F16X2] = { STACK_PTX_STACK_TYPE_F16X2, 0 },
    [STACK_PTX_ARG_TYPE_V2_F16] = { STACK_PTX_STACK_TYPE_F16, 2 },
};

#define stack_ptx_encode_constant_f32(c) { \
    .instruction_type=STACK_PTX_INSTRUCTION_TYPE_CONSTANT, \
    .stack_idx=STACK_PTX_STACK_TYPE_F32, \
    .idx=0, \
    .payload={.f=(c)} \
}

#define stack_ptx_encode_constant_u32(c) { \
    .instruction_type=STACK_PTX_INSTRUCTION_TYPE_CONSTANT, \
    .stack_idx=STACK_PTX_STACK_TYPE_U32, \
    .idx=0, \
    .payload={.u=(c)} \
}

#define stack_ptx_encode_constant_s32(c) { \
    .instruction_type=STACK_PTX_INSTRUCTION_TYPE_CONSTANT, \
    .stack_idx=STACK_PTX_STACK_TYPE_S32, \
    .idx=0, \
    .payload={.s=(c)} \
}

#define stack_ptx_encode_constant_f16(c) { \
    .instruction_type=STACK_PTX_INSTRUCTION_TYPE_CONSTANT, \
    .stack_idx=STACK_PTX_STACK_TYPE_F16, \
    .idx=0, \
    .payload={.f=(c)} \
}

#define stack_ptx_encode_constant_f16x2(c) { \
    .instruction_type=STACK_PTX_INSTRUCTION_TYPE_CONSTANT, \
    .stack_idx=STACK_PTX_STACK_TYPE_F16X2, \
    .idx=0, \
    .payload={.f=(c)} \
}

static const StackPtxInstruction stack_ptx_encode_ptx_instruction_add_u32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_ADD_U32, STACK_PTX_ARG_TYPE_U32, STACK_PTX_ARG_TYPE_U32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_U32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_sub_u32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_SUB_U32, STACK_PTX_ARG_TYPE_U32, STACK_PTX_ARG_TYPE_U32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_U32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_mul_lo_u32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_MUL_LO_U32, STACK_PTX_ARG_TYPE_U32, STACK_PTX_ARG_TYPE_U32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_U32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_mad_lo_u32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_MAD_LO_U32, STACK_PTX_ARG_TYPE_U32, STACK_PTX_ARG_TYPE_U32, STACK_PTX_ARG_TYPE_U32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_U32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_copysign_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_COPYSIGN_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_add_ftz_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_ADD_FTZ_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_sub_ftz_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_SUB_FTZ_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_mul_ftz_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_MUL_FTZ_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_fma_rn_ftz_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_FMA_RN_FTZ_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_div_approx_ftz_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_DIV_APPROX_FTZ_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_abs_ftz_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_ABS_FTZ_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_neg_ftz_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_NEG_FTZ_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_min_ftz_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_MIN_FTZ_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_max_ftz_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_MAX_FTZ_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_rcp_approx_ftz_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_RCP_APPROX_FTZ_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_sqrt_approx_ftz_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_SQRT_APPROX_FTZ_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_rsqrt_approx_ftz_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_RSQRT_APPROX_FTZ_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_sin_approx_ftz_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_SIN_APPROX_FTZ_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_cos_approx_ftz_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_COS_APPROX_FTZ_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_lg2_approx_ftz_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_LG2_APPROX_FTZ_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_ex2_approx_ftz_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_EX2_APPROX_FTZ_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_tanh_approx_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_TANH_APPROX_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_setp_lt_ftz_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_SETP_LT_FTZ_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_PRED, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_selp_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_SELP_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_PRED, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_cvt_rna_tf32_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_CVT_RNA_TF32_F32, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_TF32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_cvt_rn_f32_s32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_CVT_RN_F32_S32, STACK_PTX_ARG_TYPE_U32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_mma_sync_aligned_m16n8k4_row_col_f32_tf32_tf32_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_MMA_SYNC_ALIGNED_M16N8K4_ROW_COL_F32_TF32_TF32_F32, STACK_PTX_ARG_TYPE_V2_TF32, STACK_PTX_ARG_TYPE_V1_TF32, STACK_PTX_ARG_TYPE_V4_F32, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_V4_F32, STACK_PTX_ARG_TYPE_NONE, 1);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_f16x2_to_v2_f16 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_F16X2_TO_V2_F16, STACK_PTX_ARG_TYPE_F16X2, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_V2_F16, STACK_PTX_ARG_TYPE_NONE, 0);
static const StackPtxInstruction stack_ptx_encode_ptx_instruction_f16_to_f32 = _STACK_PTX_ENCODE_PTX_INSTRUCTION(STACK_PTX_PTX_INSTRUCTION_F16_TO_F32, STACK_PTX_ARG_TYPE_F16, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_NONE, STACK_PTX_ARG_TYPE_F32, STACK_PTX_ARG_TYPE_NONE, 0);

__attribute__((unused))
static const char* stack_ptx_ptx_instruction_display_names[] = {
    [STACK_PTX_PTX_INSTRUCTION_ADD_U32] = "add.u32",
    [STACK_PTX_PTX_INSTRUCTION_SUB_U32] = "sub.u32",
    [STACK_PTX_PTX_INSTRUCTION_MUL_LO_U32] = "mul.lo.u32",
    [STACK_PTX_PTX_INSTRUCTION_MAD_LO_U32] = "mad.lo.u32",
    [STACK_PTX_PTX_INSTRUCTION_COPYSIGN_F32] = "copysign.f32",
    [STACK_PTX_PTX_INSTRUCTION_ADD_FTZ_F32] = "add.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_SUB_FTZ_F32] = "sub.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_MUL_FTZ_F32] = "mul.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_FMA_RN_FTZ_F32] = "fma.rn.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_DIV_APPROX_FTZ_F32] = "div.approx.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_ABS_FTZ_F32] = "abs.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_NEG_FTZ_F32] = "neg.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_MIN_FTZ_F32] = "min.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_MAX_FTZ_F32] = "max.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_RCP_APPROX_FTZ_F32] = "rcp.approx.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_SQRT_APPROX_FTZ_F32] = "sqrt.approx.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_RSQRT_APPROX_FTZ_F32] = "rsqrt.approx.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_SIN_APPROX_FTZ_F32] = "sin.approx.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_COS_APPROX_FTZ_F32] = "cos.approx.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_LG2_APPROX_FTZ_F32] = "lg2.approx.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_EX2_APPROX_FTZ_F32] = "ex2.approx.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_TANH_APPROX_F32] = "tanh.approx.f32",
    [STACK_PTX_PTX_INSTRUCTION_SETP_LT_FTZ_F32] = "setp.lt.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_SELP_F32] = "selp.f32",
    [STACK_PTX_PTX_INSTRUCTION_CVT_RNA_TF32_F32] = "cvt.rna.tf32.f32",
    [STACK_PTX_PTX_INSTRUCTION_CVT_RN_F32_S32] = "cvt.rn.f32.s32",
    [STACK_PTX_PTX_INSTRUCTION_MMA_SYNC_ALIGNED_M16N8K4_ROW_COL_F32_TF32_TF32_F32] = "mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32",
    [STACK_PTX_PTX_INSTRUCTION_F16X2_TO_V2_F16] = "f16x2_to_v2_f16",
    [STACK_PTX_PTX_INSTRUCTION_F16_TO_F32] = "f16_to_f32",
};

static const char* stack_ptx_ptx_instruction_ptx_names[] = {
    [STACK_PTX_PTX_INSTRUCTION_ADD_U32] = "add.u32",
    [STACK_PTX_PTX_INSTRUCTION_SUB_U32] = "sub.u32",
    [STACK_PTX_PTX_INSTRUCTION_MUL_LO_U32] = "mul.lo.u32",
    [STACK_PTX_PTX_INSTRUCTION_MAD_LO_U32] = "mad.lo.u32",
    [STACK_PTX_PTX_INSTRUCTION_COPYSIGN_F32] = "copysign.f32",
    [STACK_PTX_PTX_INSTRUCTION_ADD_FTZ_F32] = "add.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_SUB_FTZ_F32] = "sub.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_MUL_FTZ_F32] = "mul.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_FMA_RN_FTZ_F32] = "fma.rn.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_DIV_APPROX_FTZ_F32] = "div.approx.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_ABS_FTZ_F32] = "abs.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_NEG_FTZ_F32] = "neg.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_MIN_FTZ_F32] = "min.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_MAX_FTZ_F32] = "max.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_RCP_APPROX_FTZ_F32] = "rcp.approx.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_SQRT_APPROX_FTZ_F32] = "sqrt.approx.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_RSQRT_APPROX_FTZ_F32] = "rsqrt.approx.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_SIN_APPROX_FTZ_F32] = "sin.approx.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_COS_APPROX_FTZ_F32] = "cos.approx.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_LG2_APPROX_FTZ_F32] = "lg2.approx.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_EX2_APPROX_FTZ_F32] = "ex2.approx.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_TANH_APPROX_F32] = "tanh.approx.f32",
    [STACK_PTX_PTX_INSTRUCTION_SETP_LT_FTZ_F32] = "setp.lt.ftz.f32",
    [STACK_PTX_PTX_INSTRUCTION_SELP_F32] = "selp.f32",
    [STACK_PTX_PTX_INSTRUCTION_CVT_RNA_TF32_F32] = "cvt.rna.tf32.f32",
    [STACK_PTX_PTX_INSTRUCTION_CVT_RN_F32_S32] = "cvt.rn.f32.s32",
    [STACK_PTX_PTX_INSTRUCTION_MMA_SYNC_ALIGNED_M16N8K4_ROW_COL_F32_TF32_TF32_F32] = "mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32",
    [STACK_PTX_PTX_INSTRUCTION_F16X2_TO_V2_F16] = "mov.b32",
    [STACK_PTX_PTX_INSTRUCTION_F16_TO_F32] = "cvt.f32.f16",
};

static const StackPtxInstruction stack_ptx_ptx_instructions[] = {
    [STACK_PTX_PTX_INSTRUCTION_ADD_U32] = stack_ptx_encode_ptx_instruction_add_u32,
    [STACK_PTX_PTX_INSTRUCTION_SUB_U32] = stack_ptx_encode_ptx_instruction_sub_u32,
    [STACK_PTX_PTX_INSTRUCTION_MUL_LO_U32] = stack_ptx_encode_ptx_instruction_mul_lo_u32,
    [STACK_PTX_PTX_INSTRUCTION_MAD_LO_U32] = stack_ptx_encode_ptx_instruction_mad_lo_u32,
    [STACK_PTX_PTX_INSTRUCTION_COPYSIGN_F32] = stack_ptx_encode_ptx_instruction_copysign_f32,
    [STACK_PTX_PTX_INSTRUCTION_ADD_FTZ_F32] = stack_ptx_encode_ptx_instruction_add_ftz_f32,
    [STACK_PTX_PTX_INSTRUCTION_SUB_FTZ_F32] = stack_ptx_encode_ptx_instruction_sub_ftz_f32,
    [STACK_PTX_PTX_INSTRUCTION_MUL_FTZ_F32] = stack_ptx_encode_ptx_instruction_mul_ftz_f32,
    [STACK_PTX_PTX_INSTRUCTION_FMA_RN_FTZ_F32] = stack_ptx_encode_ptx_instruction_fma_rn_ftz_f32,
    [STACK_PTX_PTX_INSTRUCTION_DIV_APPROX_FTZ_F32] = stack_ptx_encode_ptx_instruction_div_approx_ftz_f32,
    [STACK_PTX_PTX_INSTRUCTION_ABS_FTZ_F32] = stack_ptx_encode_ptx_instruction_abs_ftz_f32,
    [STACK_PTX_PTX_INSTRUCTION_NEG_FTZ_F32] = stack_ptx_encode_ptx_instruction_neg_ftz_f32,
    [STACK_PTX_PTX_INSTRUCTION_MIN_FTZ_F32] = stack_ptx_encode_ptx_instruction_min_ftz_f32,
    [STACK_PTX_PTX_INSTRUCTION_MAX_FTZ_F32] = stack_ptx_encode_ptx_instruction_max_ftz_f32,
    [STACK_PTX_PTX_INSTRUCTION_RCP_APPROX_FTZ_F32] = stack_ptx_encode_ptx_instruction_rcp_approx_ftz_f32,
    [STACK_PTX_PTX_INSTRUCTION_SQRT_APPROX_FTZ_F32] = stack_ptx_encode_ptx_instruction_sqrt_approx_ftz_f32,
    [STACK_PTX_PTX_INSTRUCTION_RSQRT_APPROX_FTZ_F32] = stack_ptx_encode_ptx_instruction_rsqrt_approx_ftz_f32,
    [STACK_PTX_PTX_INSTRUCTION_SIN_APPROX_FTZ_F32] = stack_ptx_encode_ptx_instruction_sin_approx_ftz_f32,
    [STACK_PTX_PTX_INSTRUCTION_COS_APPROX_FTZ_F32] = stack_ptx_encode_ptx_instruction_cos_approx_ftz_f32,
    [STACK_PTX_PTX_INSTRUCTION_LG2_APPROX_FTZ_F32] = stack_ptx_encode_ptx_instruction_lg2_approx_ftz_f32,
    [STACK_PTX_PTX_INSTRUCTION_EX2_APPROX_FTZ_F32] = stack_ptx_encode_ptx_instruction_ex2_approx_ftz_f32,
    [STACK_PTX_PTX_INSTRUCTION_TANH_APPROX_F32] = stack_ptx_encode_ptx_instruction_tanh_approx_f32,
    [STACK_PTX_PTX_INSTRUCTION_SETP_LT_FTZ_F32] = stack_ptx_encode_ptx_instruction_setp_lt_ftz_f32,
    [STACK_PTX_PTX_INSTRUCTION_SELP_F32] = stack_ptx_encode_ptx_instruction_selp_f32,
    [STACK_PTX_PTX_INSTRUCTION_CVT_RNA_TF32_F32] = stack_ptx_encode_ptx_instruction_cvt_rna_tf32_f32,
    [STACK_PTX_PTX_INSTRUCTION_CVT_RN_F32_S32] = stack_ptx_encode_ptx_instruction_cvt_rn_f32_s32,
    [STACK_PTX_PTX_INSTRUCTION_MMA_SYNC_ALIGNED_M16N8K4_ROW_COL_F32_TF32_TF32_F32] = stack_ptx_encode_ptx_instruction_mma_sync_aligned_m16n8k4_row_col_f32_tf32_tf32_f32,
    [STACK_PTX_PTX_INSTRUCTION_F16X2_TO_V2_F16] = stack_ptx_encode_ptx_instruction_f16x2_to_v2_f16,
    [STACK_PTX_PTX_INSTRUCTION_F16_TO_F32] = stack_ptx_encode_ptx_instruction_f16_to_f32,
};

static const StackPtxInstruction stack_ptx_encode_special_register_tid = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_TID, STACK_PTX_ARG_TYPE_V4_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_tid_x = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_TID_X, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_tid_y = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_TID_Y, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_tid_z = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_TID_Z, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_ntid = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_NTID, STACK_PTX_ARG_TYPE_V4_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_ntid_x = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_NTID_X, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_ntid_y = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_NTID_Y, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_ntid_z = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_NTID_Z, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_laneid = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_LANEID, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_warpid = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_WARPID, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_nwarpid = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_NWARPID, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_ctaid = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_CTAID, STACK_PTX_ARG_TYPE_V4_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_ctaid_x = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_CTAID_X, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_ctaid_y = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_CTAID_Y, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_ctaid_z = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_CTAID_Z, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_nctaid = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_NCTAID, STACK_PTX_ARG_TYPE_V4_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_nctaid_x = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_NCTAID_X, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_nctaid_y = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_NCTAID_Y, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_nctaid_z = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_NCTAID_Z, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_smid = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_SMID, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_nsmid = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_NSMID, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_gridid = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_GRIDID, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_lanemask_eq = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_LANEMASK_EQ, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_lanemask_le = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_LANEMASK_LE, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_lanemask_lt = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_LANEMASK_LT, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_lanemask_ge = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_LANEMASK_GE, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_lanemask_gt = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_LANEMASK_GT, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_clock = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_CLOCK, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_clock_hi = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_CLOCK_HI, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_total_smem_size = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_TOTAL_SMEM_SIZE, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_aggr_smem_size = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_AGGR_SMEM_SIZE, STACK_PTX_ARG_TYPE_U32);
static const StackPtxInstruction stack_ptx_encode_special_register_dynamic_smem_size = _STACK_PTX_ENCODE_SPECIAL_REGISTER(STACK_PTX_SPECIAL_REGISTER_DYNAMIC_SMEM_SIZE, STACK_PTX_ARG_TYPE_U32);

__attribute__((unused))
static const char* stack_ptx_special_register_display_names[] = {
    [STACK_PTX_SPECIAL_REGISTER_TID] = "tid",
    [STACK_PTX_SPECIAL_REGISTER_TID_X] = "tid.x",
    [STACK_PTX_SPECIAL_REGISTER_TID_Y] = "tid.y",
    [STACK_PTX_SPECIAL_REGISTER_TID_Z] = "tid.z",
    [STACK_PTX_SPECIAL_REGISTER_NTID] = "ntid",
    [STACK_PTX_SPECIAL_REGISTER_NTID_X] = "ntid.x",
    [STACK_PTX_SPECIAL_REGISTER_NTID_Y] = "ntid.y",
    [STACK_PTX_SPECIAL_REGISTER_NTID_Z] = "ntid.z",
    [STACK_PTX_SPECIAL_REGISTER_LANEID] = "laneid",
    [STACK_PTX_SPECIAL_REGISTER_WARPID] = "warpid",
    [STACK_PTX_SPECIAL_REGISTER_NWARPID] = "nwarpid",
    [STACK_PTX_SPECIAL_REGISTER_CTAID] = "ctaid",
    [STACK_PTX_SPECIAL_REGISTER_CTAID_X] = "ctaid.x",
    [STACK_PTX_SPECIAL_REGISTER_CTAID_Y] = "ctaid.y",
    [STACK_PTX_SPECIAL_REGISTER_CTAID_Z] = "ctaid.z",
    [STACK_PTX_SPECIAL_REGISTER_NCTAID] = "nctaid",
    [STACK_PTX_SPECIAL_REGISTER_NCTAID_X] = "nctaid.x",
    [STACK_PTX_SPECIAL_REGISTER_NCTAID_Y] = "nctaid.y",
    [STACK_PTX_SPECIAL_REGISTER_NCTAID_Z] = "nctaid.z",
    [STACK_PTX_SPECIAL_REGISTER_SMID] = "smid",
    [STACK_PTX_SPECIAL_REGISTER_NSMID] = "nsmid",
    [STACK_PTX_SPECIAL_REGISTER_GRIDID] = "gridid",
    [STACK_PTX_SPECIAL_REGISTER_LANEMASK_EQ] = "lanemask_eq",
    [STACK_PTX_SPECIAL_REGISTER_LANEMASK_LE] = "lanemask_le",
    [STACK_PTX_SPECIAL_REGISTER_LANEMASK_LT] = "lanemask_lt",
    [STACK_PTX_SPECIAL_REGISTER_LANEMASK_GE] = "lanemask_ge",
    [STACK_PTX_SPECIAL_REGISTER_LANEMASK_GT] = "lanemask_gt",
    [STACK_PTX_SPECIAL_REGISTER_CLOCK] = "clock",
    [STACK_PTX_SPECIAL_REGISTER_CLOCK_HI] = "clock_hi",
    [STACK_PTX_SPECIAL_REGISTER_TOTAL_SMEM_SIZE] = "total_smem_size",
    [STACK_PTX_SPECIAL_REGISTER_AGGR_SMEM_SIZE] = "aggr_smem_size",
    [STACK_PTX_SPECIAL_REGISTER_DYNAMIC_SMEM_SIZE] = "dynamic_smem_size",
};

static const char* stack_ptx_special_register_ptx_names[] = {
    [STACK_PTX_SPECIAL_REGISTER_TID] = "tid",
    [STACK_PTX_SPECIAL_REGISTER_TID_X] = "tid.x",
    [STACK_PTX_SPECIAL_REGISTER_TID_Y] = "tid.y",
    [STACK_PTX_SPECIAL_REGISTER_TID_Z] = "tid.z",
    [STACK_PTX_SPECIAL_REGISTER_NTID] = "ntid",
    [STACK_PTX_SPECIAL_REGISTER_NTID_X] = "ntid.x",
    [STACK_PTX_SPECIAL_REGISTER_NTID_Y] = "ntid.y",
    [STACK_PTX_SPECIAL_REGISTER_NTID_Z] = "ntid.z",
    [STACK_PTX_SPECIAL_REGISTER_LANEID] = "laneid",
    [STACK_PTX_SPECIAL_REGISTER_WARPID] = "warpid",
    [STACK_PTX_SPECIAL_REGISTER_NWARPID] = "nwarpid",
    [STACK_PTX_SPECIAL_REGISTER_CTAID] = "ctaid",
    [STACK_PTX_SPECIAL_REGISTER_CTAID_X] = "ctaid.x",
    [STACK_PTX_SPECIAL_REGISTER_CTAID_Y] = "ctaid.y",
    [STACK_PTX_SPECIAL_REGISTER_CTAID_Z] = "ctaid.z",
    [STACK_PTX_SPECIAL_REGISTER_NCTAID] = "nctaid",
    [STACK_PTX_SPECIAL_REGISTER_NCTAID_X] = "nctaid.x",
    [STACK_PTX_SPECIAL_REGISTER_NCTAID_Y] = "nctaid.y",
    [STACK_PTX_SPECIAL_REGISTER_NCTAID_Z] = "nctaid.z",
    [STACK_PTX_SPECIAL_REGISTER_SMID] = "smid",
    [STACK_PTX_SPECIAL_REGISTER_NSMID] = "nsmid",
    [STACK_PTX_SPECIAL_REGISTER_GRIDID] = "gridid",
    [STACK_PTX_SPECIAL_REGISTER_LANEMASK_EQ] = "lanemask_eq",
    [STACK_PTX_SPECIAL_REGISTER_LANEMASK_LE] = "lanemask_le",
    [STACK_PTX_SPECIAL_REGISTER_LANEMASK_LT] = "lanemask_lt",
    [STACK_PTX_SPECIAL_REGISTER_LANEMASK_GE] = "lanemask_ge",
    [STACK_PTX_SPECIAL_REGISTER_LANEMASK_GT] = "lanemask_gt",
    [STACK_PTX_SPECIAL_REGISTER_CLOCK] = "clock",
    [STACK_PTX_SPECIAL_REGISTER_CLOCK_HI] = "clock_hi",
    [STACK_PTX_SPECIAL_REGISTER_TOTAL_SMEM_SIZE] = "total_smem_size",
    [STACK_PTX_SPECIAL_REGISTER_AGGR_SMEM_SIZE] = "aggr_smem_size",
    [STACK_PTX_SPECIAL_REGISTER_DYNAMIC_SMEM_SIZE] = "dynamic_smem_size",
};

static const StackPtxInstruction stack_ptx_special_registers[] = {
    [STACK_PTX_SPECIAL_REGISTER_TID] = stack_ptx_encode_special_register_tid,
    [STACK_PTX_SPECIAL_REGISTER_TID_X] = stack_ptx_encode_special_register_tid_x,
    [STACK_PTX_SPECIAL_REGISTER_TID_Y] = stack_ptx_encode_special_register_tid_y,
    [STACK_PTX_SPECIAL_REGISTER_TID_Z] = stack_ptx_encode_special_register_tid_z,
    [STACK_PTX_SPECIAL_REGISTER_NTID] = stack_ptx_encode_special_register_ntid,
    [STACK_PTX_SPECIAL_REGISTER_NTID_X] = stack_ptx_encode_special_register_ntid_x,
    [STACK_PTX_SPECIAL_REGISTER_NTID_Y] = stack_ptx_encode_special_register_ntid_y,
    [STACK_PTX_SPECIAL_REGISTER_NTID_Z] = stack_ptx_encode_special_register_ntid_z,
    [STACK_PTX_SPECIAL_REGISTER_LANEID] = stack_ptx_encode_special_register_laneid,
    [STACK_PTX_SPECIAL_REGISTER_WARPID] = stack_ptx_encode_special_register_warpid,
    [STACK_PTX_SPECIAL_REGISTER_NWARPID] = stack_ptx_encode_special_register_nwarpid,
    [STACK_PTX_SPECIAL_REGISTER_CTAID] = stack_ptx_encode_special_register_ctaid,
    [STACK_PTX_SPECIAL_REGISTER_CTAID_X] = stack_ptx_encode_special_register_ctaid_x,
    [STACK_PTX_SPECIAL_REGISTER_CTAID_Y] = stack_ptx_encode_special_register_ctaid_y,
    [STACK_PTX_SPECIAL_REGISTER_CTAID_Z] = stack_ptx_encode_special_register_ctaid_z,
    [STACK_PTX_SPECIAL_REGISTER_NCTAID] = stack_ptx_encode_special_register_nctaid,
    [STACK_PTX_SPECIAL_REGISTER_NCTAID_X] = stack_ptx_encode_special_register_nctaid_x,
    [STACK_PTX_SPECIAL_REGISTER_NCTAID_Y] = stack_ptx_encode_special_register_nctaid_y,
    [STACK_PTX_SPECIAL_REGISTER_NCTAID_Z] = stack_ptx_encode_special_register_nctaid_z,
    [STACK_PTX_SPECIAL_REGISTER_SMID] = stack_ptx_encode_special_register_smid,
    [STACK_PTX_SPECIAL_REGISTER_NSMID] = stack_ptx_encode_special_register_nsmid,
    [STACK_PTX_SPECIAL_REGISTER_GRIDID] = stack_ptx_encode_special_register_gridid,
    [STACK_PTX_SPECIAL_REGISTER_LANEMASK_EQ] = stack_ptx_encode_special_register_lanemask_eq,
    [STACK_PTX_SPECIAL_REGISTER_LANEMASK_LE] = stack_ptx_encode_special_register_lanemask_le,
    [STACK_PTX_SPECIAL_REGISTER_LANEMASK_LT] = stack_ptx_encode_special_register_lanemask_lt,
    [STACK_PTX_SPECIAL_REGISTER_LANEMASK_GE] = stack_ptx_encode_special_register_lanemask_ge,
    [STACK_PTX_SPECIAL_REGISTER_LANEMASK_GT] = stack_ptx_encode_special_register_lanemask_gt,
    [STACK_PTX_SPECIAL_REGISTER_CLOCK] = stack_ptx_encode_special_register_clock,
    [STACK_PTX_SPECIAL_REGISTER_CLOCK_HI] = stack_ptx_encode_special_register_clock_hi,
    [STACK_PTX_SPECIAL_REGISTER_TOTAL_SMEM_SIZE] = stack_ptx_encode_special_register_total_smem_size,
    [STACK_PTX_SPECIAL_REGISTER_AGGR_SMEM_SIZE] = stack_ptx_encode_special_register_aggr_smem_size,
    [STACK_PTX_SPECIAL_REGISTER_DYNAMIC_SMEM_SIZE] = stack_ptx_encode_special_register_dynamic_smem_size,
};

static const StackPtxStackInfo stack_ptx_stack_info = {
    .ptx_instruction_strings = stack_ptx_ptx_instruction_ptx_names,
    .num_ptx_instructions = STACK_PTX_PTX_INSTRUCTION_NUM_ENUMS,
    .special_register_strings = stack_ptx_special_register_ptx_names,
    .num_special_registers = STACK_PTX_SPECIAL_REGISTER_NUM_ENUMS,
    .stack_literal_prefixes = stack_ptx_stack_literal_prefixes,
    .num_stacks = STACK_PTX_STACK_TYPE_NUM_ENUMS,
    .arg_type_info = stack_ptx_arg_type_info,
    .num_arg_types = STACK_PTX_ARG_TYPE_NUM_ENUMS
};
