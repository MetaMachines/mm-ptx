// Auto-generated by ptx_inject_generate_infos.py on 2025-10-20 16:37:30Z
// Source JSON: ptx_inject_default_types.json
#pragma once

#include <ptx_inject.h>

#ifdef PTX_INJECT_TYPES_ABI_VERSION
#if PTX_INJECT_TYPES_ABI_VERSION != 1
#error "PTX_INJECT_TYPES_ABI_VERSION mismatch with generated header"
#endif
#endif

typedef enum {
    PTX_INJECT_DATA_TYPE_F16,
    PTX_INJECT_DATA_TYPE_F16X2,
    PTX_INJECT_DATA_TYPE_S32,
    PTX_INJECT_DATA_TYPE_U32,
    PTX_INJECT_DATA_TYPE_F32,
    PTX_INJECT_DATA_TYPE_B32,
    PTX_INJECT_DATA_TYPE_NUM_ENUMS
} PtxInjectDataType;

static const PtxInjectDataTypeInfo ptx_inject_data_type_infos[] = {
//  name,       register_type,  mov_postfix,    register_char,  register_cast_str
    { "f16", "b16", "b16", 'h', "*(unsigned short*)&" },
    { "f16X2", "b32", "b32", 'r', "*(unsigned int*)&" },
    { "s32", "s32", "s32", 'r', "" },
    { "u32", "u32", "u32", 'r', "" },
    { "f32", "f32", "f32", 'f', "" },
    { "b32", "b32", "b32", 'r', "" },
};
static const size_t num_ptx_inject_data_type_infos = PTX_INJECT_ARRAY_NUM_ELEMS(ptx_inject_data_type_infos);

__attribute__((unused))
static
const char*
ptx_inject_data_type_to_string(
    PtxInjectDataType data_type
) {
    switch(data_type) {
        case PTX_INJECT_DATA_TYPE_F16:      return "f16";
        case PTX_INJECT_DATA_TYPE_F16X2:      return "f16X2";
        case PTX_INJECT_DATA_TYPE_S32:      return "s32";
        case PTX_INJECT_DATA_TYPE_U32:      return "u32";
        case PTX_INJECT_DATA_TYPE_F32:      return "f32";
        case PTX_INJECT_DATA_TYPE_B32:      return "b32";
        case PTX_INJECT_DATA_TYPE_NUM_ENUMS: break;
    }
    return "invalid_data_type";
}
