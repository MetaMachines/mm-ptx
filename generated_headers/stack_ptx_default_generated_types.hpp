// Auto-generated by stack_ptx_generate_infos.py on 2025-10-20 23:05:07Z
// Source JSON: stack_ptx_descriptions.json

/*
* SPDX-FileCopyrightText: 2025 MetaMachines LLC
*
* SPDX-License-Identifier: MIT
*/

#pragma once

#include <stack_ptx.h>

#define STACK_PTX_ARRAY_NUM_ELEMS(array) sizeof((array)) / sizeof(*(array))

namespace stack_ptx {

enum class StackType {
    F32,
    U32,
    S32,
    PRED,
    TF32,
    F16,
    F16X2,
    NUM_ENUMS,
    NONE = NUM_ENUMS
};

enum class ArgType {
    F32,
    TF32,
    V1_TF32,
    V2_TF32,
    V4_F32,
    S32,
    U32,
    V4_U32,
    PRED,
    F16,
    F16X2,
    V2_F16,
    NUM_ENUMS,
    NONE = NUM_ENUMS
};

enum class PtxInstruction {
    ADD_U32,
    SUB_U32,
    MUL_LO_U32,
    MAD_LO_U32,
    COPYSIGN_F32,
    ADD_FTZ_F32,
    SUB_FTZ_F32,
    MUL_FTZ_F32,
    FMA_RN_FTZ_F32,
    DIV_APPROX_FTZ_F32,
    ABS_FTZ_F32,
    NEG_FTZ_F32,
    MIN_FTZ_F32,
    MAX_FTZ_F32,
    RCP_APPROX_FTZ_F32,
    SQRT_APPROX_FTZ_F32,
    RSQRT_APPROX_FTZ_F32,
    SIN_APPROX_FTZ_F32,
    COS_APPROX_FTZ_F32,
    LG2_APPROX_FTZ_F32,
    EX2_APPROX_FTZ_F32,
    TANH_APPROX_F32,
    SETP_LT_FTZ_F32,
    SELP_F32,
    CVT_RNA_TF32_F32,
    CVT_RN_F32_S32,
    MMA_SYNC_ALIGNED_M16N8K4_ROW_COL_F32_TF32_TF32_F32,
    F16X2_TO_V2_F16,
    F16_TO_F32,
    NUM_ENUMS
};

enum class SpecialRegister {
    TID,
    TID_X,
    TID_Y,
    TID_Z,
    NTID,
    NTID_X,
    NTID_Y,
    NTID_Z,
    LANEID,
    WARPID,
    NWARPID,
    CTAID,
    CTAID_X,
    CTAID_Y,
    CTAID_Z,
    NCTAID,
    NCTAID_X,
    NCTAID_Y,
    NCTAID_Z,
    SMID,
    NSMID,
    GRIDID,
    LANEMASK_EQ,
    LANEMASK_LE,
    LANEMASK_LT,
    LANEMASK_GE,
    LANEMASK_GT,
    CLOCK,
    CLOCK_HI,
    TOTAL_SMEM_SIZE,
    AGGR_SMEM_SIZE,
    DYNAMIC_SMEM_SIZE,
    NUM_ENUMS
};

constexpr StackPtxInstruction _encode_return() {
    StackPtxInstruction instruction{};
    instruction.instruction_type = STACK_PTX_INSTRUCTION_TYPE_RETURN;
    instruction.stack_idx = 0;
    instruction.idx = 0;
    instruction.payload.u = 0;
    return instruction;
}

constexpr StackPtxInstruction _encode_meta(
    StackPtxMetaInstruction meta_instruction,
    StackType stack_type,
    uint32_t c
) {
    StackPtxInstruction instruction{};
    instruction.instruction_type = STACK_PTX_INSTRUCTION_TYPE_META;
    instruction.stack_idx = static_cast<size_t>(stack_type);
    instruction.idx = static_cast<uint16_t>(meta_instruction);
    instruction.payload.meta_constant = c;
    return instruction;
}

constexpr StackPtxInstruction _encode_ptx_instruction(
    PtxInstruction ptx_instruction,
    ArgType arg_0,
    ArgType arg_1,
    ArgType arg_2,
    ArgType arg_3,
    ArgType ret_0,
    ArgType ret_1,
    bool is_aligned
) {
    StackPtxPTXArgs ptx_args{};
    ptx_args.arg_0 = static_cast<size_t>(arg_0);
    ptx_args.arg_1 = static_cast<size_t>(arg_1);
    ptx_args.arg_2 = static_cast<size_t>(arg_2);
    ptx_args.arg_3 = static_cast<size_t>(arg_3);
    ptx_args.ret_0 = static_cast<size_t>(ret_0);
    ptx_args.ret_1 = static_cast<size_t>(ret_1);
    ptx_args.flag_is_aligned = is_aligned;
    StackPtxInstruction instruction{};
    instruction.instruction_type = STACK_PTX_INSTRUCTION_TYPE_PTX;
    instruction.stack_idx = static_cast<size_t>(StackType::NONE);
    instruction.idx = static_cast<uint16_t>(ptx_instruction);
    instruction.payload.ptx_args = ptx_args;
    return instruction;
}

constexpr StackPtxInstruction _encode_special_register(
    SpecialRegister special_register,
    ArgType arg_type
) {
    StackPtxInstruction instruction{};
    instruction.instruction_type = STACK_PTX_INSTRUCTION_TYPE_SPECIAL;
    instruction.stack_idx = static_cast<size_t>(StackType::NONE);
    instruction.idx = static_cast<uint16_t>(special_register);
    instruction.payload.special_arg = static_cast<size_t>(arg_type);
    return instruction;
}

static const char* stack_literal_prefixes[] = {
    "f32",
    "u32",
    "s32",
    "pred",
    "b32",
    "b16",
    "b32",
};

static const StackPtxArgTypeInfo arg_type_infos[] = {
    { static_cast<size_t>(StackType::F32), 0 },
    { static_cast<size_t>(StackType::TF32), 0 },
    { static_cast<size_t>(StackType::TF32), 1 },
    { static_cast<size_t>(StackType::TF32), 2 },
    { static_cast<size_t>(StackType::F32), 4 },
    { static_cast<size_t>(StackType::S32), 0 },
    { static_cast<size_t>(StackType::U32), 0 },
    { static_cast<size_t>(StackType::U32), 4 },
    { static_cast<size_t>(StackType::PRED), 0 },
    { static_cast<size_t>(StackType::F16), 0 },
    { static_cast<size_t>(StackType::F16X2), 0 },
    { static_cast<size_t>(StackType::F16), 2 },
};

constexpr StackPtxInstruction encode_constant_f32(float c) {
    StackPtxInstruction instruction{};
    instruction.instruction_type = STACK_PTX_INSTRUCTION_TYPE_CONSTANT;
    instruction.stack_idx = static_cast<size_t>(StackType::F32);
    instruction.idx = 0;
    instruction.payload.f = c;
    return instruction;
}

constexpr StackPtxInstruction encode_constant_u32(uint32_t c) {
    StackPtxInstruction instruction{};
    instruction.instruction_type = STACK_PTX_INSTRUCTION_TYPE_CONSTANT;
    instruction.stack_idx = static_cast<size_t>(StackType::U32);
    instruction.idx = 0;
    instruction.payload.u = c;
    return instruction;
}

constexpr StackPtxInstruction encode_constant_s32(int32_t c) {
    StackPtxInstruction instruction{};
    instruction.instruction_type = STACK_PTX_INSTRUCTION_TYPE_CONSTANT;
    instruction.stack_idx = static_cast<size_t>(StackType::S32);
    instruction.idx = 0;
    instruction.payload.s = c;
    return instruction;
}

constexpr StackPtxInstruction encode_constant_f16(float c) {
    StackPtxInstruction instruction{};
    instruction.instruction_type = STACK_PTX_INSTRUCTION_TYPE_CONSTANT;
    instruction.stack_idx = static_cast<size_t>(StackType::F16);
    instruction.idx = 0;
    instruction.payload.f = c;
    return instruction;
}

constexpr StackPtxInstruction encode_constant_f16x2(float c) {
    StackPtxInstruction instruction{};
    instruction.instruction_type = STACK_PTX_INSTRUCTION_TYPE_CONSTANT;
    instruction.stack_idx = static_cast<size_t>(StackType::F16X2);
    instruction.idx = 0;
    instruction.payload.f = c;
    return instruction;
}

constexpr StackPtxInstruction encode_input(uint16_t idx) {
    StackPtxInstruction instruction{};
    instruction.instruction_type = STACK_PTX_INSTRUCTION_TYPE_INPUT;
    instruction.stack_idx = 0;
    instruction.idx = idx;
    instruction.payload.u = 0;
    return instruction;
}

constexpr StackPtxInstruction encode_routine(uint16_t idx) {
    StackPtxInstruction instruction{};
    instruction.instruction_type = STACK_PTX_INSTRUCTION_TYPE_ROUTINE;
    instruction.stack_idx = 0;
    instruction.idx = idx;
    instruction.payload.u = 0;
    return instruction;
}
      
constexpr StackPtxInstruction encode_store(StackType stack_type, uint16_t idx) {
    StackPtxInstruction instruction{};
    instruction.instruction_type = STACK_PTX_INSTRUCTION_TYPE_STORE;
    instruction.stack_idx = static_cast<size_t>(stack_type);
    instruction.idx = idx;
    instruction.payload.u = 0;
    return instruction;
}
      
constexpr StackPtxInstruction encode_load(uint16_t idx) {
    StackPtxInstruction instruction{};
    instruction.instruction_type = STACK_PTX_INSTRUCTION_TYPE_LOAD;
    instruction.stack_idx = 0;
    instruction.idx = idx;
    instruction.payload.u = 0;
    return instruction;
}

constexpr StackPtxInstruction encode_meta_constant(uint32_t c)              { return _encode_meta(STACK_PTX_META_INSTRUCTION_CONSTANT, StackType::NONE, c); }
constexpr StackPtxInstruction encode_meta_dup(StackType stack_type)         { return _encode_meta(STACK_PTX_META_INSTRUCTION_DUP, stack_type, 0); }
constexpr StackPtxInstruction encode_meta_yank_dup(StackType stack_type)    { return _encode_meta(STACK_PTX_META_INSTRUCTION_YANK_DUP, stack_type, 0); }
constexpr StackPtxInstruction encode_meta_swap(StackType stack_type)        { return _encode_meta(STACK_PTX_META_INSTRUCTION_SWAP, stack_type, 0); }
constexpr StackPtxInstruction encode_meta_swap_with(StackType stack_type)   { return _encode_meta(STACK_PTX_META_INSTRUCTION_SWAP_WITH, stack_type, 0); }
constexpr StackPtxInstruction encode_meta_replace(StackType stack_type)     { return _encode_meta(STACK_PTX_META_INSTRUCTION_REPLACE, stack_type, 0); }
constexpr StackPtxInstruction encode_meta_drop(StackType stack_type)        { return _encode_meta(STACK_PTX_META_INSTRUCTION_DROP, stack_type, 0); }
constexpr StackPtxInstruction encode_meta_rotate(StackType stack_type)      { return _encode_meta(STACK_PTX_META_INSTRUCTION_ROTATE, stack_type, 0); }
constexpr StackPtxInstruction encode_meta_reverse(StackType stack_type)     { return _encode_meta(STACK_PTX_META_INSTRUCTION_REVERSE, stack_type, 0); }
static const StackPtxInstruction encode_return = _encode_return();

static const StackPtxInstruction encode_ptx_instruction_add_u32 = _encode_ptx_instruction(PtxInstruction::ADD_U32, ArgType::U32, ArgType::U32, ArgType::NONE, ArgType::NONE, ArgType::U32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_sub_u32 = _encode_ptx_instruction(PtxInstruction::SUB_U32, ArgType::U32, ArgType::U32, ArgType::NONE, ArgType::NONE, ArgType::U32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_mul_lo_u32 = _encode_ptx_instruction(PtxInstruction::MUL_LO_U32, ArgType::U32, ArgType::U32, ArgType::NONE, ArgType::NONE, ArgType::U32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_mad_lo_u32 = _encode_ptx_instruction(PtxInstruction::MAD_LO_U32, ArgType::U32, ArgType::U32, ArgType::U32, ArgType::NONE, ArgType::U32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_copysign_f32 = _encode_ptx_instruction(PtxInstruction::COPYSIGN_F32, ArgType::F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_add_ftz_f32 = _encode_ptx_instruction(PtxInstruction::ADD_FTZ_F32, ArgType::F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_sub_ftz_f32 = _encode_ptx_instruction(PtxInstruction::SUB_FTZ_F32, ArgType::F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_mul_ftz_f32 = _encode_ptx_instruction(PtxInstruction::MUL_FTZ_F32, ArgType::F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_fma_rn_ftz_f32 = _encode_ptx_instruction(PtxInstruction::FMA_RN_FTZ_F32, ArgType::F32, ArgType::F32, ArgType::F32, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_div_approx_ftz_f32 = _encode_ptx_instruction(PtxInstruction::DIV_APPROX_FTZ_F32, ArgType::F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_abs_ftz_f32 = _encode_ptx_instruction(PtxInstruction::ABS_FTZ_F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_neg_ftz_f32 = _encode_ptx_instruction(PtxInstruction::NEG_FTZ_F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_min_ftz_f32 = _encode_ptx_instruction(PtxInstruction::MIN_FTZ_F32, ArgType::F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_max_ftz_f32 = _encode_ptx_instruction(PtxInstruction::MAX_FTZ_F32, ArgType::F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_rcp_approx_ftz_f32 = _encode_ptx_instruction(PtxInstruction::RCP_APPROX_FTZ_F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_sqrt_approx_ftz_f32 = _encode_ptx_instruction(PtxInstruction::SQRT_APPROX_FTZ_F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_rsqrt_approx_ftz_f32 = _encode_ptx_instruction(PtxInstruction::RSQRT_APPROX_FTZ_F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_sin_approx_ftz_f32 = _encode_ptx_instruction(PtxInstruction::SIN_APPROX_FTZ_F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_cos_approx_ftz_f32 = _encode_ptx_instruction(PtxInstruction::COS_APPROX_FTZ_F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_lg2_approx_ftz_f32 = _encode_ptx_instruction(PtxInstruction::LG2_APPROX_FTZ_F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_ex2_approx_ftz_f32 = _encode_ptx_instruction(PtxInstruction::EX2_APPROX_FTZ_F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_tanh_approx_f32 = _encode_ptx_instruction(PtxInstruction::TANH_APPROX_F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_setp_lt_ftz_f32 = _encode_ptx_instruction(PtxInstruction::SETP_LT_FTZ_F32, ArgType::F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::PRED, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_selp_f32 = _encode_ptx_instruction(PtxInstruction::SELP_F32, ArgType::F32, ArgType::F32, ArgType::PRED, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_cvt_rna_tf32_f32 = _encode_ptx_instruction(PtxInstruction::CVT_RNA_TF32_F32, ArgType::F32, ArgType::NONE, ArgType::NONE, ArgType::NONE, ArgType::TF32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_cvt_rn_f32_s32 = _encode_ptx_instruction(PtxInstruction::CVT_RN_F32_S32, ArgType::U32, ArgType::NONE, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_mma_sync_aligned_m16n8k4_row_col_f32_tf32_tf32_f32 = _encode_ptx_instruction(PtxInstruction::MMA_SYNC_ALIGNED_M16N8K4_ROW_COL_F32_TF32_TF32_F32, ArgType::V2_TF32, ArgType::V1_TF32, ArgType::V4_F32, ArgType::NONE, ArgType::V4_F32, ArgType::NONE, true);
static const StackPtxInstruction encode_ptx_instruction_f16x2_to_v2_f16 = _encode_ptx_instruction(PtxInstruction::F16X2_TO_V2_F16, ArgType::F16X2, ArgType::NONE, ArgType::NONE, ArgType::NONE, ArgType::V2_F16, ArgType::NONE, false);
static const StackPtxInstruction encode_ptx_instruction_f16_to_f32 = _encode_ptx_instruction(PtxInstruction::F16_TO_F32, ArgType::F16, ArgType::NONE, ArgType::NONE, ArgType::NONE, ArgType::F32, ArgType::NONE, false);

__attribute__((unused))
static const char* ptx_instruction_display_names[] = {
    "add.u32",
    "sub.u32",
    "mul.lo.u32",
    "mad.lo.u32",
    "copysign.f32",
    "add.ftz.f32",
    "sub.ftz.f32",
    "mul.ftz.f32",
    "fma.rn.ftz.f32",
    "div.approx.ftz.f32",
    "abs.ftz.f32",
    "neg.ftz.f32",
    "min.ftz.f32",
    "max.ftz.f32",
    "rcp.approx.ftz.f32",
    "sqrt.approx.ftz.f32",
    "rsqrt.approx.ftz.f32",
    "sin.approx.ftz.f32",
    "cos.approx.ftz.f32",
    "lg2.approx.ftz.f32",
    "ex2.approx.ftz.f32",
    "tanh.approx.f32",
    "setp.lt.ftz.f32",
    "selp.f32",
    "cvt.rna.tf32.f32",
    "cvt.rn.f32.s32",
    "mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32",
    "f16x2_to_v2_f16",
    "f16_to_f32",
};

static const char* ptx_instruction_ptx_names[] = {
    "add.u32",
    "sub.u32",
    "mul.lo.u32",
    "mad.lo.u32",
    "copysign.f32",
    "add.ftz.f32",
    "sub.ftz.f32",
    "mul.ftz.f32",
    "fma.rn.ftz.f32",
    "div.approx.ftz.f32",
    "abs.ftz.f32",
    "neg.ftz.f32",
    "min.ftz.f32",
    "max.ftz.f32",
    "rcp.approx.ftz.f32",
    "sqrt.approx.ftz.f32",
    "rsqrt.approx.ftz.f32",
    "sin.approx.ftz.f32",
    "cos.approx.ftz.f32",
    "lg2.approx.ftz.f32",
    "ex2.approx.ftz.f32",
    "tanh.approx.f32",
    "setp.lt.ftz.f32",
    "selp.f32",
    "cvt.rna.tf32.f32",
    "cvt.rn.f32.s32",
    "mma.sync.aligned.m16n8k4.row.col.f32.tf32.tf32.f32",
    "mov.b32",
    "cvt.f32.f16",
};

static const StackPtxInstruction ptx_instructions[] = {
    encode_ptx_instruction_add_u32,
    encode_ptx_instruction_sub_u32,
    encode_ptx_instruction_mul_lo_u32,
    encode_ptx_instruction_mad_lo_u32,
    encode_ptx_instruction_copysign_f32,
    encode_ptx_instruction_add_ftz_f32,
    encode_ptx_instruction_sub_ftz_f32,
    encode_ptx_instruction_mul_ftz_f32,
    encode_ptx_instruction_fma_rn_ftz_f32,
    encode_ptx_instruction_div_approx_ftz_f32,
    encode_ptx_instruction_abs_ftz_f32,
    encode_ptx_instruction_neg_ftz_f32,
    encode_ptx_instruction_min_ftz_f32,
    encode_ptx_instruction_max_ftz_f32,
    encode_ptx_instruction_rcp_approx_ftz_f32,
    encode_ptx_instruction_sqrt_approx_ftz_f32,
    encode_ptx_instruction_rsqrt_approx_ftz_f32,
    encode_ptx_instruction_sin_approx_ftz_f32,
    encode_ptx_instruction_cos_approx_ftz_f32,
    encode_ptx_instruction_lg2_approx_ftz_f32,
    encode_ptx_instruction_ex2_approx_ftz_f32,
    encode_ptx_instruction_tanh_approx_f32,
    encode_ptx_instruction_setp_lt_ftz_f32,
    encode_ptx_instruction_selp_f32,
    encode_ptx_instruction_cvt_rna_tf32_f32,
    encode_ptx_instruction_cvt_rn_f32_s32,
    encode_ptx_instruction_mma_sync_aligned_m16n8k4_row_col_f32_tf32_tf32_f32,
    encode_ptx_instruction_f16x2_to_v2_f16,
    encode_ptx_instruction_f16_to_f32,
};

static const StackPtxInstruction encode_special_register_tid = _encode_special_register(SpecialRegister::TID, ArgType::V4_U32);
static const StackPtxInstruction encode_special_register_tid_x = _encode_special_register(SpecialRegister::TID_X, ArgType::U32);
static const StackPtxInstruction encode_special_register_tid_y = _encode_special_register(SpecialRegister::TID_Y, ArgType::U32);
static const StackPtxInstruction encode_special_register_tid_z = _encode_special_register(SpecialRegister::TID_Z, ArgType::U32);
static const StackPtxInstruction encode_special_register_ntid = _encode_special_register(SpecialRegister::NTID, ArgType::V4_U32);
static const StackPtxInstruction encode_special_register_ntid_x = _encode_special_register(SpecialRegister::NTID_X, ArgType::U32);
static const StackPtxInstruction encode_special_register_ntid_y = _encode_special_register(SpecialRegister::NTID_Y, ArgType::U32);
static const StackPtxInstruction encode_special_register_ntid_z = _encode_special_register(SpecialRegister::NTID_Z, ArgType::U32);
static const StackPtxInstruction encode_special_register_laneid = _encode_special_register(SpecialRegister::LANEID, ArgType::U32);
static const StackPtxInstruction encode_special_register_warpid = _encode_special_register(SpecialRegister::WARPID, ArgType::U32);
static const StackPtxInstruction encode_special_register_nwarpid = _encode_special_register(SpecialRegister::NWARPID, ArgType::U32);
static const StackPtxInstruction encode_special_register_ctaid = _encode_special_register(SpecialRegister::CTAID, ArgType::V4_U32);
static const StackPtxInstruction encode_special_register_ctaid_x = _encode_special_register(SpecialRegister::CTAID_X, ArgType::U32);
static const StackPtxInstruction encode_special_register_ctaid_y = _encode_special_register(SpecialRegister::CTAID_Y, ArgType::U32);
static const StackPtxInstruction encode_special_register_ctaid_z = _encode_special_register(SpecialRegister::CTAID_Z, ArgType::U32);
static const StackPtxInstruction encode_special_register_nctaid = _encode_special_register(SpecialRegister::NCTAID, ArgType::V4_U32);
static const StackPtxInstruction encode_special_register_nctaid_x = _encode_special_register(SpecialRegister::NCTAID_X, ArgType::U32);
static const StackPtxInstruction encode_special_register_nctaid_y = _encode_special_register(SpecialRegister::NCTAID_Y, ArgType::U32);
static const StackPtxInstruction encode_special_register_nctaid_z = _encode_special_register(SpecialRegister::NCTAID_Z, ArgType::U32);
static const StackPtxInstruction encode_special_register_smid = _encode_special_register(SpecialRegister::SMID, ArgType::U32);
static const StackPtxInstruction encode_special_register_nsmid = _encode_special_register(SpecialRegister::NSMID, ArgType::U32);
static const StackPtxInstruction encode_special_register_gridid = _encode_special_register(SpecialRegister::GRIDID, ArgType::U32);
static const StackPtxInstruction encode_special_register_lanemask_eq = _encode_special_register(SpecialRegister::LANEMASK_EQ, ArgType::U32);
static const StackPtxInstruction encode_special_register_lanemask_le = _encode_special_register(SpecialRegister::LANEMASK_LE, ArgType::U32);
static const StackPtxInstruction encode_special_register_lanemask_lt = _encode_special_register(SpecialRegister::LANEMASK_LT, ArgType::U32);
static const StackPtxInstruction encode_special_register_lanemask_ge = _encode_special_register(SpecialRegister::LANEMASK_GE, ArgType::U32);
static const StackPtxInstruction encode_special_register_lanemask_gt = _encode_special_register(SpecialRegister::LANEMASK_GT, ArgType::U32);
static const StackPtxInstruction encode_special_register_clock = _encode_special_register(SpecialRegister::CLOCK, ArgType::U32);
static const StackPtxInstruction encode_special_register_clock_hi = _encode_special_register(SpecialRegister::CLOCK_HI, ArgType::U32);
static const StackPtxInstruction encode_special_register_total_smem_size = _encode_special_register(SpecialRegister::TOTAL_SMEM_SIZE, ArgType::U32);
static const StackPtxInstruction encode_special_register_aggr_smem_size = _encode_special_register(SpecialRegister::AGGR_SMEM_SIZE, ArgType::U32);
static const StackPtxInstruction encode_special_register_dynamic_smem_size = _encode_special_register(SpecialRegister::DYNAMIC_SMEM_SIZE, ArgType::U32);

__attribute__((unused))
static const char* special_register_display_names[] = {
    "tid",
    "tid.x",
    "tid.y",
    "tid.z",
    "ntid",
    "ntid.x",
    "ntid.y",
    "ntid.z",
    "laneid",
    "warpid",
    "nwarpid",
    "ctaid",
    "ctaid.x",
    "ctaid.y",
    "ctaid.z",
    "nctaid",
    "nctaid.x",
    "nctaid.y",
    "nctaid.z",
    "smid",
    "nsmid",
    "gridid",
    "lanemask_eq",
    "lanemask_le",
    "lanemask_lt",
    "lanemask_ge",
    "lanemask_gt",
    "clock",
    "clock_hi",
    "total_smem_size",
    "aggr_smem_size",
    "dynamic_smem_size",
};

static const char* special_register_ptx_names[] = {
    "tid",
    "tid.x",
    "tid.y",
    "tid.z",
    "ntid",
    "ntid.x",
    "ntid.y",
    "ntid.z",
    "laneid",
    "warpid",
    "nwarpid",
    "ctaid",
    "ctaid.x",
    "ctaid.y",
    "ctaid.z",
    "nctaid",
    "nctaid.x",
    "nctaid.y",
    "nctaid.z",
    "smid",
    "nsmid",
    "gridid",
    "lanemask_eq",
    "lanemask_le",
    "lanemask_lt",
    "lanemask_ge",
    "lanemask_gt",
    "clock",
    "clock_hi",
    "total_smem_size",
    "aggr_smem_size",
    "dynamic_smem_size",
};

static const StackPtxInstruction special_registers[] = {
    encode_special_register_tid,
    encode_special_register_tid_x,
    encode_special_register_tid_y,
    encode_special_register_tid_z,
    encode_special_register_ntid,
    encode_special_register_ntid_x,
    encode_special_register_ntid_y,
    encode_special_register_ntid_z,
    encode_special_register_laneid,
    encode_special_register_warpid,
    encode_special_register_nwarpid,
    encode_special_register_ctaid,
    encode_special_register_ctaid_x,
    encode_special_register_ctaid_y,
    encode_special_register_ctaid_z,
    encode_special_register_nctaid,
    encode_special_register_nctaid_x,
    encode_special_register_nctaid_y,
    encode_special_register_nctaid_z,
    encode_special_register_smid,
    encode_special_register_nsmid,
    encode_special_register_gridid,
    encode_special_register_lanemask_eq,
    encode_special_register_lanemask_le,
    encode_special_register_lanemask_lt,
    encode_special_register_lanemask_ge,
    encode_special_register_lanemask_gt,
    encode_special_register_clock,
    encode_special_register_clock_hi,
    encode_special_register_total_smem_size,
    encode_special_register_aggr_smem_size,
    encode_special_register_dynamic_smem_size,
};

static const StackPtxStackInfo stack_info = {
    ptx_instruction_ptx_names,
    static_cast<size_t>(PtxInstruction::NUM_ENUMS),
    special_register_ptx_names,
    static_cast<size_t>(SpecialRegister::NUM_ENUMS),
    stack_literal_prefixes,
    static_cast<size_t>(StackType::NUM_ENUMS),
    arg_type_infos,
    static_cast<size_t>(ArgType::NUM_ENUMS)
};

} // namespace stack_ptx
